'''    Marks the start of comment section
-------------------------------------------------------
Name: Challenge 2 
Creator:  Alice and Clarisse
Date:   21 Feb 2022
Revision:  1.0
Sources and inspirations: Lab 4, Lab 5 Task 3b
-------------------------------------------------------
'''

import pyb
from pyb import Pin, Timer, ADC
from oled_938 import OLED_938   # Use OLED display driver
from mpu6050 import MPU6050

#Measure roll and pitch angles
pitch = 0
imu = MPU6050(1, False)
def read_imu(dt):
   
    global g_pitch
    alpha = 0.7    # larger = longer time constant
    pitch = int(imu.pitch())
    roll = int(imu.roll())
    print('pitch = '+ str(pitch))
    print('roll = '+ str(roll))

    g_pitch = alpha*(g_pitch + imu.get_gy()*dt*0.001) + (1-alpha)*pitch
    # show graphics
    # display the roll and pitch angles 
    oled.draw_text(0,10,'Pitch:{:5d} Roll:{:5d}'.format(pitch, roll))
    oled.display()

       
g_pitch = 0  
tic = pyb.millis()      

   
   
# Define pins to control motor
A1 = Pin('X3', Pin.OUT_PP)      # Control direction of motor A
A2 = Pin('X4', Pin.OUT_PP)
PWMA = Pin('X1')                # Control speed of motor A
B1 = Pin('X7', Pin.OUT_PP)      # Control direction of motor B
B2 = Pin('X8', Pin.OUT_PP)
PWMB = Pin('X2')                # Control speed of motor B

# Configure timer 2 to produce 1KHz clock for PWM control
tim = Timer(2, freq = 1000)
motorA = tim.channel (1, Timer.PWM, pin = PWMA)
motorB = tim.channel (2, Timer.PWM, pin = PWMB)

# Define 5k Potentiometer
pot = pyb.ADC(Pin('X11'))

# I2C connected to Y9, Y10 (I2C bus 2) and Y11 is reset low active
i2c = pyb.I2C(2, pyb.I2C.MASTER)
devid = i2c.scan()              # find the I2C device number
oled = OLED_938(
    pinout={"sda": "Y10", "scl": "Y9", "res": "Y8"},
    height=64, external_vcc=False, i2c_devid=i2c.scan()[0],
)
oled.poweron()
oled.init_display()
oled.draw_text(0,0, 'Challenge 2')
oled.display()

def A_forward(value):
    A1.low()
    A2.high()
    motorA.pulse_width_percent(value)

def A_back(value):
    A2.low()
    A1.high()
    motorA.pulse_width_percent(value)
   
def A_stop():
    A1.high()
    A2.high()
   
def B_forward(value):
    B2.low()
    B1.high()
    motorB.pulse_width_percent(value)

def B_back(value):
    B1.low()
    B2.high()
    motorB.pulse_width_percent(value)
   
def B_stop():
    B1.high()
    B2.high()
   
# Initialise variables
speed = 0
A_speed = 0
A_count = 0
B_speed = 0
B_count = 0

#-------  Section to set up Interrupts ----------
def isr_motorA(dummy):  # motor A sensor ISR - just count transitions
    global A_count
    A_count += 1

def isr_motorB(dummy):  # motor B sensor ISR - just count transitions
    global B_count
    B_count += 1
       
def isr_speed_timer(dummy):     # timer interrupt at 100msec intervals
    global A_count
    global A_speed
    global B_count
    global B_speed
    A_speed = A_count           # remember count value
    B_speed = B_count
    A_count = 0                 # reset the count
    B_count = 0
   
# Create external interrupts for motorA Hall Effect Senor
import micropython
micropython.alloc_emergency_exception_buf(100)
from pyb import ExtInt

motorA_int = ExtInt ('Y4', ExtInt.IRQ_RISING, Pin.PULL_NONE,isr_motorA)
motorB_int = ExtInt ('Y6', ExtInt.IRQ_RISING, Pin.PULL_NONE,isr_motorB)

# Create timer interrupts at 100 msec intervals
speed_timer = pyb.Timer(4, freq=10)
speed_timer.callback(isr_speed_timer)


#-------  END of Interrupt Section  ----------

while True:             # loop forever until CTRL-C
    toc = pyb.millis()
    read_imu(toc-tic)
    tic = pyb.millis()
    # drive motor - controlled by potentiometer
    #speed = int((pot.read()-2048)*200/4096)
    pitch = imu.pitch()
    roll = imu.roll()
    
    # Calculate motor speeds based on angles
    A_speed = int(100 * (roll / 90))
    B_speed = int(100 * (pitch / 90))
    
    # Set motor A direction and speed
    if A_speed > 0:
        A1.low()
        A2.high()
    else:
        A1.high()
        A2.low()
    motorA.pulse_width_percent(abs(A_speed))
    
    # Set motor B direction and speed
    if B_speed > 0:
        B1.low()
        B2.high()
    else:
        B1.high()
        B2.low()
    motorB.pulse_width_percent(abs(B_speed))

    # Display new speed
    oled.draw_text(0,20,'Motor Drive:{:5d}%'.format(speed))
    oled.draw_text(0,35,'Motor A:{:5.2f} rps'.format(A_speed/39))  
    oled.draw_text(0,45,'Motor B:{:5.2f} rps'.format(B_speed/39))  
    oled.display()
   
    pyb.delay(100)
